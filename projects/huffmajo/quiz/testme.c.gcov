        -:    0:Source:testme.c
        -:    0:Graph:testme.gcno
        -:    0:Data:testme.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include<stdio.h>
        -:    2:#include<string.h>
        -:    3:#include<stdlib.h>
        -:    4:#include<time.h>
        -:    5:
function inputChar called 132738 returned 100% blocks executed 100%
   132738:    6:char inputChar()
        -:    7:{
        -:    8:	// valid ASCII characters are from 33 to 126
        -:    9:	char randomChar;
   132738:   10:	randomChar = rand() % 94 + 32;
call    0 returned 100%
   132738:   11:	return randomChar;
        -:   12:}
        -:   13:
function inputString called 132738 returned 100% blocks executed 100%
   132738:   14:char *inputString()
        -:   15:{
   132738:   16:	int stringLen = 6;
   132738:   17:	char randomString[stringLen - 1];
        -:   18:
        -:   19:	int i;
   929166:   20:	for (i = 0; i < stringLen; i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:   21:	{
        -:   22:		// we only need to generate characters from 'e' to 't'
   796428:   23:		randomString[i] =  rand() % 16 + 101;
call    0 returned 100%
        -:   24:	}
   132738:   25:	randomString[5] = '\0';
        -:   26:
   132738:   27:	char* strPtr = randomString;
   132738:   28:	return strPtr;
        -:   29:}
        -:   30:
function testme called 1 returned 0% blocks executed 100%
        1:   31:void testme()
        -:   32:{
        1:   33:	int tcCount = 0;
        -:   34:	char *s;
        -:   35:	char c;
        1:   36:	int state = 0;
        -:   37:	while (1)
        -:   38:	{
   132738:   39:		tcCount++;
   132738:   40:		c = inputChar();
call    0 returned 100%
   132738:   41:		s = inputString();
call    0 returned 100%
   132738:   42:		printf("Iteration %d: c = %c, s = %s, state = %d\n", tcCount, c, s, state);
call    0 returned 100%
        -:   43:
   132738:   44:		if (c == '[' && state == 0) state = 1;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
   132738:   45:		if (c == '(' && state == 1) state = 2;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
   132738:   46:		if (c == '{' && state == 2) state = 3;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
   132738:   47:		if (c == ' '&& state == 3) state = 4;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
   132738:   48:		if (c == 'a' && state == 4) state = 5;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
   132738:   49:		if (c == 'x' && state == 5) state = 6;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
   132738:   50:		if (c == '}' && state == 6) state = 7;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
   132738:   51:		if (c == ')' && state == 7) state = 8;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
   132738:   52:		if (c == ']' && state == 8) state = 9;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
   132738:   53:		if (s[0] == 'r' && s[1] == 'e'
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
      530:   54:			&& s[2] == 's' && s[3] == 'e'
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
        3:   55:			&& s[4] == 't' && s[5] == '\0'
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   56:			&& state == 9)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   57:		{
        1:   58:			printf("error ");
call    0 returned 100%
        1:   59:			exit(200);
call    0 returned 0%
        -:   60:		}
   132737:   61:	}
        -:   62:}
        -:   63:
function main called 1 returned 0% blocks executed 80%
        1:   64:int main(int argc, char *argv[])
        -:   65:{
        1:   66:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   67:	testme();
call    0 returned 0%
        -:   68:
        -:   69:/*
        -:   70:	int i;
        -:   71:	int testLimit = 10;
        -:   72:	int allGood = 1;
        -:   73:	char* ender;
        -:   74:
        -:   75:	// loop until failure or test complete
        -:   76:	for (i = 0; i < testLimit; i++)
        -:   77:	{
        -:   78://		TEST inputString()
        -:   79:		char* str;
        -:   80:		strcpy(str, inputString());
        -:   81:
        -:   82:		printf("%s\n", str);
        -:   83:
        -:   84:
        -:   85://		TEST inputChar()
        -:   86:
        -:   87:		char c = inputChar();
        -:   88:
        -:   89:		if (i % 20 == 0)
        -:   90:		{
        -:   91:			printf("%c\n", c);
        -:   92:		}
        -:   93:		else
        -:   94:		{
        -:   95:			printf("%c ", c);
        -:   96:
        -:   97:		}
        -:   98:
        -:   99:	}
        -:  100:*/
    #####:  101:	return 0;
        -:  102:}
        -:  103:
