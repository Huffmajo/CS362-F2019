        -:    0:Source:testme.c
        -:    0:Graph:testme.gcno
        -:    0:Data:testme.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include<stdio.h>
        -:    2:#include<string.h>
        -:    3:#include<stdlib.h>
        -:    4:#include<time.h>
        -:    5:
function inputChar called 92475 returned 100% blocks executed 100%
    92475:    6:char inputChar()
        -:    7:{
        -:    8:	// generate valid ASCII characters ' ' to '~'
        -:    9:	char randomChar;
    92475:   10:	randomChar = rand() % 94 + 32;
call    0 returned 100%
    92475:   11:	return randomChar;
        -:   12:}
        -:   13:
function inputString called 92475 returned 100% blocks executed 100%
    92475:   14:char *inputString()
        -:   15:{
    92475:   16:	int stringLen = 6;
    92475:   17:	char randomString[stringLen - 1];
        -:   18:
        -:   19:	// fill string with random chars
        -:   20:	int i;
   647325:   21:	for (i = 0; i < stringLen; i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:   22:	{
        -:   23:		// only generate characters from 'e' to 't' to pass state 9
   554850:   24:		randomString[i] =  rand() % 16 + 101;
call    0 returned 100%
        -:   25:	}
        -:   26:
        -:   27:	// always set last char as null
    92475:   28:	randomString[5] = '\0';
        -:   29:
    92475:   30:	char* strPtr = randomString;
    92475:   31:	return strPtr;
        -:   32:}
        -:   33:
function testme called 1 returned 0% blocks executed 100%
        1:   34:void testme()
        -:   35:{
        1:   36:	int tcCount = 0;
        -:   37:	char *s;
        -:   38:	char c;
        1:   39:	int state = 0;
        -:   40:	while (1)
        -:   41:	{
    92475:   42:		tcCount++;
    92475:   43:		c = inputChar();
call    0 returned 100%
    92475:   44:		s = inputString();
call    0 returned 100%
    92475:   45:		printf("Iteration %d: c = %c, s = %s, state = %d\n", tcCount, c, s, state);
call    0 returned 100%
        -:   46:
    92475:   47:		if (c == '[' && state == 0) state = 1;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    92475:   48:		if (c == '(' && state == 1) state = 2;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    92475:   49:		if (c == '{' && state == 2) state = 3;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    92475:   50:		if (c == ' '&& state == 3) state = 4;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    92475:   51:		if (c == 'a' && state == 4) state = 5;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    92475:   52:		if (c == 'x' && state == 5) state = 6;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    92475:   53:		if (c == '}' && state == 6) state = 7;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    92475:   54:		if (c == ')' && state == 7) state = 8;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    92475:   55:		if (c == ']' && state == 8) state = 9;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    92475:   56:		if (s[0] == 'r' && s[1] == 'e'
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
      381:   57:			&& s[2] == 's' && s[3] == 'e'
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        2:   58:			&& s[4] == 't' && s[5] == '\0'
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   59:			&& state == 9)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   60:		{
        1:   61:			printf("error ");
call    0 returned 100%
        1:   62:			exit(200);
call    0 returned 0%
        -:   63:		}
    92474:   64:	}
        -:   65:}
        -:   66:
function main called 1 returned 0% blocks executed 80%
        1:   67:int main(int argc, char *argv[])
        -:   68:{
        1:   69:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   70:	testme();
call    0 returned 0%
    #####:   71:	return 0;
        -:   72:}
        -:   73:
